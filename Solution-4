#include<bits/stdc++.h>
using namespace std;
class Solution {
public:
	int minStepToReachTarget(vector<int>&KnightPos, vector<int>&TargetPos, int N){
	    // Code here
	    if(KnightPos[0] == TargetPos[0] and KnightPos[1] == TargetPos[1]) return 0;
	    vector<vector<int>> vis(N+1, vector<int>(N+1, 0));
	    queue<pair<int, int>> q;
	    q.push({KnightPos[0], KnightPos[1]});
	    
	    int delr[8] = {2, 2, 1, 1, -1, -1, -2, -2};
	    int delc[8] = {1, -1, 2, -2, -2, 2, -1, 1};
	    
	    while(!q.empty()) {
	        int x = q.front().first;
	        int y = q.front().second;
	        q.pop();
	        if(x == TargetPos[0] and y == TargetPos[1]) return vis[x][y];
	        for(int i = 0; i < 8; ++i) {
	            int nx = x + delr[i];
	            int ny = y + delc[i];
	            
	            if(nx >= 1 and nx <= N and ny >= 1 and ny <= N and !vis[nx][ny]) {
	                vis[nx][ny] = vis[x][y] + 1;
	                q.push({nx, ny});
	            }
	        }
	    }
	    return -1;
	}
};
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		vector<int>KnightPos(2);
		vector<int>TargetPos(2);
		int N;
		cin >> N;
		cin >> KnightPos[0] >> KnightPos[1];
		cin >> TargetPos[0] >> TargetPos[1];
		Solution obj;
		int ans = obj.minStepToReachTarget(KnightPos, TargetPos, N);
		cout << ans <<"\n";
	}
	return 0;
}
