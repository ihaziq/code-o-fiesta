#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <bits/stdc++.h>
using namespace std;

    int minStepToReachTarget(int knightPosition[], int pawnPosition[], int N){
        // Code here
        if(knightPosition[0]==pawnPosition[0] && knightPosition[1] == pawnPosition[1]){
            return 0;
        }
        vector<vector<int>> visited (N+1, vector<int>(N+1,0));
        queue<pair<pair<int, int>, int>> Q;
        Q.push({{knightPosition[0],knightPosition[1]}, 0});
        visited[knightPosition[0]][knightPosition[1]]=1;
        int dx[8] = {+2,+2,+1,+1,-1,-1,-2,-2};
        int dy[8] = {-1,+1,-2,+2,-2,+2,-1,+1};
        int k=0;
        while(!Q.empty()){
            int R = Q.front().first.first;
            int C = Q.front().first.second;
            int step = Q.front().second;
            k = max (k, step);
            Q.pop();
            for(int x=0;x<8;x++){
                int nr = R + dx[x];
                int nc = C + dy[x];
                if(nr>=1 && nr <=N && nc>=1 && nc <=N && visited[nr][nc]==0){
                    knightPosition[0] = nr;
                    knightPosition[1] = nc;
                    if(knightPosition[0]==pawnPosition[0] && knightPosition[1] == pawnPosition[1]){
                        return k+1;
                    }
                    visited[nr][nc]=1;
                    Q.push({{nr, nc}, k+1});
                }
            }
        }
        return -1;
    }

int main() {
    int N, knightPosition[2], pawnPosition[2];
    cin >> N;
    for(int i=0;i<2;i++){
        cin >> knightPosition[i];
    }
    for(int i=0;i<2;i++){
        cin >> pawnPosition[i];
    }
    cout << minStepToReachTarget(knightPosition, pawnPosition, N);
    return 0;
}
